import os

# Define un directorio de cach칠 temporal y aseg칰rate de que existe.
cache_dir = "/tmp/.cache/BasicSR"
os.makedirs(cache_dir, exist_ok=True)

# Fuerza a basicsr (y otras librer칤as) a usar este directorio para la cach칠.
os.environ["BASICSR_CACHE_DIR"] = cache_dir

# Opcional: tambi칠n puedes forzar que HOME apunte a /tmp para que expanduser("~") d칠 un directorio escribible.
os.environ["HOME"] = "/tmp"

import sys
import torchvision.transforms.functional as F
sys.modules["torchvision.transforms.functional_tensor"] = F

import streamlit as st
import cv2
import numpy as np
import torch
from basicsr.archs.rrdbnet_arch import RRDBNet
from realesrgan import RealESRGANer



# Establecer dispositivo: usa GPU si est치 disponible, de lo contrario CPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Cargar modelo Real-ESRGAN para GPU (o CPU si no hay GPU)
@st.cache_resource
def load_model():
    model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
    # Mover el modelo al dispositivo (GPU o CPU)
    model = model.to(device)
    # Configurar half=True si se usa GPU, lo que acelera el procesamiento
    half_setting = True if torch.cuda.is_available() else False
    upsampler = RealESRGANer(
        scale=4,
        model_path="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth",
        model=model,
        tile=400,  # Divide la imagen en bloques para optimizar el uso de memoria
        tile_pad=10,
        pre_pad=0,
        half=half_setting
    )
    return upsampler

upsampler = load_model()

st.title("Superresoluci칩n de Im치genes con Real-ESRGAN by Lucas De Rito (GPU)")

# Subir imagen
uploaded_file = st.file_uploader("Sube una imagen de baja resoluci칩n o en mal estado", type=["jpg", "png", "jpeg", "webp"])

if uploaded_file is not None:
    # Leer imagen
    image = cv2.imdecode(np.frombuffer(uploaded_file.read(), np.uint8), 1)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Aplicar superresoluci칩n
    with st.spinner("Mejorando la imagen (usando GPU)..."):
        output, _ = upsampler.enhance(image, outscale=4)

    # Mostrar resultados
    col1, col2 = st.columns(2)
    with col1:
        st.image(image, caption="Imagen Original (Baja Resoluci칩n)", use_container_width=True)
    with col2:
        st.image(output, caption="Imagen Mejorada (Superresoluci칩n)", use_container_width=True)

# L칤nea separatoria
st.markdown('---')

st.markdown("""
### Aclaraci칩n sobre el rendimiento y despliegue

Esta aplicaci칩n est치 dise침ada para aprovechar la aceleraci칩n por **GPU** cuando est칠 disponible, lo que permite que los modelos de superresoluci칩n se ejecuten de forma mucho m치s r치pida y eficiente. Sin embargo, en el entorno de **Streamlit Cloud (versi칩n gratuita)**, generalmente no se dispone de GPU, por lo que la aplicaci칩n se desplegar치 utilizando **CPU**. Esto puede resultar en tiempos de procesamiento m치s largos, pero la aplicaci칩n se adaptar치 autom치ticamente al entorno y seguir치 funcionando correctamente, ofreciendo una mejora significativa en la calidad de las im치genes. Se recomienda usar imagenes no muy grandes debido a que es una version desplegada en una nube gratuita que cuenta con poca infraestructura.

### Si quieren descargar el c칩digo, lo pueden encontrar en el siguiente repositorio de GitHub:  
[游댕 **Superresoluci칩n - GitHub**](https://github.com/lucasderito/superresolucion)

### Descripci칩n de la Aplicaci칩n

Esta aplicaci칩n utiliza un modelo preentrenado de **Real-ESRGAN** para mejorar la resoluci칩n de im치genes de baja calidad. Con esta herramienta, puedes transformar im치genes borrosas o de baja resoluci칩n en versiones m치s n칤tidas y detalladas.

### Caracter칤sticas y T칠cnicas Utilizadas
- **Superresoluci칩n con Real-ESRGAN:**  
  Utiliza redes neuronales profundas para aumentar la resoluci칩n de la imagen, recuperando detalles que no eran visibles en la versi칩n original.
- **Optimizaci칩n para GPU:**  
  Configurada para aprovechar la aceleraci칩n por hardware, reduciendo significativamente los tiempos de procesamiento.

### Tipos de Im치genes Sugeridas
- **Fotograf칤as antiguas o deterioradas:**  
  Ideal para restaurar im치genes hist칩ricas o fotograf칤as con calidad limitada.
- **Im치genes escaneadas de documentos y fotos:**  
  Mejora la claridad de im치genes provenientes de escaneos o dispositivos de baja resoluci칩n.
- **Capturas de dispositivos m칩viles:**  
  Perfecto para mejorar im치genes tomadas en condiciones de poca iluminaci칩n o con c치maras de menor calidad.

### Casos de Uso
#### Restauraci칩n y Mejora de Fotograf칤as
- **Restauraci칩n de im치genes hist칩ricas:**  
  Recupera detalles en fotos antiguas, facilitando su preservaci칩n y an치lisis.
- **Mejora de selfies y fotos de eventos:**  
  Convierte im치genes capturadas en entornos con iluminaci칩n deficiente en im치genes m치s n칤tidas.

#### Aplicaciones Comerciales e Industriales
- **Optimizaci칩n de im치genes para e-commerce:**  
  Aumenta la calidad visual de fotos de productos, mejorando la experiencia del cliente.
- **An치lisis en investigaciones:**  
  Proporciona im치genes de alta calidad para estudios cient칤ficos o industriales donde el detalle es crucial.

Esta aplicaci칩n es parte del portafolio de proyectos de **Lucas De Rito**, demostrando habilidades en inteligencia artificial, visi칩n por computadora y procesamiento de im치genes.

*Desarrollada con Streamlit, OpenCV, Real-ESRGAN y PyTorch.*
""")
